import { z } from "zod";

const getResponse = z
  .object({
    msg: z.string().optional(),
    items_in_queue: z.number(),
    items_in_history: z.number(),
    running_item_uid: z.string().nullable(),
    manager_state: z.string(),
    queue_stop_pending: z.boolean(),
    queue_autostart_enabled: z.boolean(),
    worker_environment_exists: z.boolean(),
    worker_environment_state: z.string(),
    worker_background_tasks: z.number(),
    re_state: z.string().nullable(),
    ip_kernel_state: z.string().nullable(),
    ip_kernel_captured: z.boolean().nullable(),
    pause_pending: z.boolean(),
    run_list_uid: z.string().optional(),
    plan_queue_uid: z.string().optional(),
    plan_history_uid: z.string().optional(),
    devices_existing_uid: z.string().optional(),
    plans_existing_uid: z.string().optional(),
    devices_allowed_uid: z.string().optional(),
    plans_allowed_uid: z.string().optional(),
    plan_queue_mode: z.object({
      loop: z.boolean(),
      ignore_failures: z.boolean(),
    }),
    task_results_uid: z.string().optional(),
    lock_info_uid: z.string().optional(),
    lock: z.object({
      environment: z.boolean(),
      queue: z.boolean(),
    }),
  })
  .transform((data) => {
    const {
      items_in_queue: itemsInQueue,
      items_in_history: itemsInHistory,
      running_item_uid: runningItemUid,
      manager_state: managerState,
      queue_stop_pending: queueStopPending,
      queue_autostart_enabled: queueAutostartEnabled,
      worker_environment_exists: workerEnvironmentExists,
      worker_environment_state: workerEnvironmentState,
      worker_background_tasks: workerBackgroundTasks,
      re_state: reState,
      ip_kernel_state: ipKernelState,
      ip_kernel_captured: ipKernelCaptured,
      pause_pending: pausePending,
      run_list_uid: runListUid,
      plan_queue_uid: planQueueUid,
      plan_history_uid: planHistoryUid,
      devices_existing_uid: devicesExistingUid,
      plans_existing_uid: plansExistingUid,
      devices_allowed_uid: devicesAllowedUid,
      plans_allowed_uid: plansAllowedUid,
      plan_queue_mode: planQueueMode,
      task_results_uid: taskResultsUid,
      lock_info_uid: lockInfoUid,
      lock,
      ...unchanged
    } = data;
    return {
      itemsInQueue,
      itemsInHistory,
      runningItemUid,
      managerState,
      queueStopPending,
      queueAutostartEnabled,
      workerEnvironmentExists,
      workerEnvironmentState,
      workerBackgroundTasks,
      reState,
      ipKernelState,
      ipKernelCaptured,
      pausePending,
      runListUid,
      planQueueUid,
      planHistoryUid,
      devicesExistingUid,
      plansExistingUid,
      devicesAllowedUid,
      plansAllowedUid,
      planQueueMode,
      taskResultsUid,
      lockInfoUid,
      lock,
      ...unchanged,
    };
  });

export default {
  getResponse,
};
